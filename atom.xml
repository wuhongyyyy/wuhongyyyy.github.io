<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://wuhongyyyy.github.io/atom.xml" rel="self"/>
  
  <link href="http://wuhongyyyy.github.io/"/>
  <updated>2024-04-17T10:28:59.872Z</updated>
  <id>http://wuhongyyyy.github.io/</id>
  
  <author>
    <name>laowu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>跨专业大半年的感悟</title>
    <link href="http://wuhongyyyy.github.io/2024/04/16/%E8%B7%A8%E4%B8%93%E4%B8%9A%E7%9A%84%E6%84%9F%E6%82%9F/"/>
    <id>http://wuhongyyyy.github.io/2024/04/16/%E8%B7%A8%E4%B8%93%E4%B8%9A%E7%9A%84%E6%84%9F%E6%82%9F/</id>
    <published>2024-04-16T13:08:00.000Z</published>
    <updated>2024-04-17T10:28:59.872Z</updated>
    
    <content type="html"><![CDATA[<h4 id="跨专业大半年的感悟"><a href="#跨专业大半年的感悟" class="headerlink" title="跨专业大半年的感悟"></a>跨专业大半年的感悟</h4><p>好，现在想来，跨专业也有快一年了，感觉可以趁着这个开源作业的机会，好好探究一下和自我检讨一下这一年我到底学到了什么。<span id="more"></span></p><h5 id="考研经历"><a href="#考研经历" class="headerlink" title="考研经历"></a>考研经历</h5><p>​靠，感觉脑袋里东西好多，不知道从何说起，那就说说为什么决定跨专业来到华师大数据学院读研。先来自我介绍一下，我是laowu，本科毕业于南京理工机械工程学院，现在在ECNU-DASE就读。还记得那是在大三，我，一个躺平仔，也不知道干啥，机械的东西学了也学的不多，学的不精。保研呢，绩点差了亿点点，感觉要是选个垃圾点的机械小专业也是能蹭个保研的。</p><p>​讲到这里，就不得不讲一讲机械学院的保研制度，我们那一届机械工程学院是有很多小专业的，其中最好的小专业就是机电专业，然后是车辆工程，机械设计，机械制造和其他小专业。保研制度是这样，学院有保研率，保研率乘上机械专业的总人数就是能保研的人数，然后按照每个小专业的人数比例平均分配每个小专业的保研人数，如果有某些小专业的保研人数还有多余的，就会按照要求首先分配到机械电子工程专业。毕竟，机械电子工程专业在机械学院也是人上人的。</p><p><img src="/../img/major_img/666.gif"></p><p>​laowu ，就是我，在大二分专业的时候以小专业倒数第三的成绩，成功进入机械电子专业，开启机械的人上人生活。害，其实我感觉我挺笨蛋又挺聪明的。笨蛋是因为感觉学啥都学的好慢，而且，躺的确实挺爽。聪明是因为，大一大二基本上全在打游戏，然后在考试前突击一下，还可以考个差不多的分数，而且我大一大二图书馆一次都没去过，图书馆的门朝哪边开我都不知道，哈哈。然后就这样到分专业了，本来我感觉我能学车辆工程专业的，是当时我的最好选择，一直躺，在机械学院躺躺，到毕业去玩玩我喜欢的汽车也不错，进了汽车集团，也能当大国工匠。不知道怎么回事，保研制度又稍微改变了一下，对，就是我提到的小专业保研制度，在我们这届之前，是按照总院的绩点而不是小专业的绩点进行保研，所以，我将小专业志愿从车辆工程改到了机械电子工程，莫名其妙地，哥们以75左右的均分，倒数第三的成绩，成功进入了机械的最好的机械电子工程专业。整个机械专业的前十，在机械电子工程专业最起码有7个，当时的机电第一名，大概均分在90分左右。</p><p><img src="/../img/major_img/OIP_1.jpg"></p><p>​然后分专业后，宿舍也都换了，laowu迎来了第一次改变，毕竟我的室友都比我厉害。室友A和B，已经保研的卷王两枚，室友C，机械专业的交际能手，现在已经在上交就读了，我一点都不羡慕😭，考试前总能搞到各种资源，然后就剩下我，laowu了。此时的laowu 就像是第一次上大学一样，因为打了两年游戏，除了体重和痘痘，基本上没有任何长进。只能说环境改变人，在室友A和室友B和室友C的带飞下，laowu我成功地又躺又赢。奖学金拿到了个三等，数学竞赛也在考研的时候水了个三等，然后还能一起打羽毛球逛南京，当时还是我带着佬A和佬B入坑的，现在在他们的手上我撑不过一个回合，我果然很菜😭😭😭。</p><p>​然后到了考研的时候，此时的laowu仍然是一脸懵，根本不知道该选啥专业，听说人工智能很火，听说周志华很强，那就先简单定个小目标，就南大的人工智能吧，毕竟laowu这么聪明的人去南大人工智能也是非常easy的事情。然后就这样闷头学了两个月，我是真的顶不住408了，想着换个学校也不错😂。然后我就和佬A谈了一下，当时佬A在备考ECNU-DASE的学硕，他说他保不了计算机的研究生就去考这个学校，当然后来他保研到本校了，就剩我一个人考研了。</p><p>​那我想，反正佬A很强，我也不知道选啥学校，那我就听他的吧，我考ECNU-DASE的专硕，不给他添竞争麻烦。然后就到了第一次考研了，其实考研的时候，我还是很摆，我有很强烈的预感，预感到我自己第一次考不上，这是后话，有时间再说吧。</p><p>​后来成绩出来了，327分，这成绩我自己都呆了。还是数学题做少了，考研太摆了。</p><p><img src="/../img/major_img/brother.jpg"></p><p>​给laowu我气得，连复试都没参加，而且直接开摆到毕业，狂吃狂玩到毕业，体重也迎来历史最高峰147斤。不过，也怨不得别人，毕竟哥们数学卷子也没刷几套，基本上全在看数学视频，自己没写几道题。</p><p>​后来二战，不想考ECNU-DASE了，我想回南理的计算机了，结果南理的计算机改考408了，laowu我体会过408的摧残，对408产生了一部分阴影，总结了下失败的经验，还是决定再次二战ECNU，这次，从7.10号开始学习，一直学习到考研那一天，最后也还行，考了393，laowu我认真起来还是挺厉害的。</p><p><img src="/../img/major_img/%E5%8E%89%E5%AE%B3.gif"></p><p>​不得不说的是，复试时，ECNU的机试，总共四道机试题，两道方向题，我差点爆0。因为从初试结束我才开始学习LeetCode，而且，哥们很摆，我看了去年的机试要求，就只学了C++这门语言用来做机试题。结果复试前几天告诉我还有Python方向题，当时的laowu，对于Python这门语言，仅限于知道Python这个单词。</p><p>​所以，正式机试的时候，我只做出了签到题，是关于排序的。下午参加方向题答题时，虽然有师姐（特此感谢，虽然我一个字母都没敲）给我准备的模版，但是我根本看不懂什么是sklearn等等，连Python的循环都看得很吃力，然后下午就在那发呆两个小时。</p><p>​不过，最后机试题，不算分，然后老师们也很好，面试我发挥的也还行，所以，laowu，摆了这么久，还是来到ECUN读研了。</p><p><img src="/../img/major_img/OIP_1.jpg"></p><h5 id="研一一年"><a href="#研一一年" class="headerlink" title="研一一年"></a>研一一年</h5><p>​作为一个很摆的人，读研期间我又打算开摆，首先，不想搞学术，误打误撞找了位不错的导师，只要我按时做出东西，基本上就不管我。</p><p><img src="/../img/major_img/OIP_1.jpg"></p><p>​接着，研一上我陷入了深深的emo，明明我开摆了，也达到我读研的目的了，回老家附近找个央企开摆也是我的目标，但是我还是很emo，每天晚上很晚睡觉。于是，laowu开始了自救，我开始研读了史铁生的文章，又开始研读王阳明，终于，我悟了。我悟到了心外无物，知行合一的道理。我是摆烂，但是我不能只摆烂。</p><p><img src="/../img/major_img/zhi_xing.jpg"></p><h4 id="可以间歇性躺平，但不能一直躺平。心外无物，知行合一。"><a href="#可以间歇性躺平，但不能一直躺平。心外无物，知行合一。" class="headerlink" title="可以间歇性躺平，但不能一直躺平。心外无物，知行合一。"></a>可以间歇性躺平，但不能一直躺平。心外无物，知行合一。</h4><p>​所以，我打算研究生三年，就好好重新认识一下我自己是谁，然后按时毕业。然后如果学得好，就学JAVA，敲一敲代码，敲一敲LeetCode，毕业挣钱。学不好的话，就回老家附近的武汉，找个央企或者国企躺一躺，然后继续寻找新的工作机会，尽量做到work life balance，如果给钱多的话，workaholic也是可以的。<strong>那么研究生三年，我就一会躺平一会冲了。</strong></p><p><img src="/../img/major_img/eat.jpg"></p><p><img src="/../img/major_img/money.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;跨专业大半年的感悟&quot;&gt;&lt;a href=&quot;#跨专业大半年的感悟&quot; class=&quot;headerlink&quot; title=&quot;跨专业大半年的感悟&quot;&gt;&lt;/a&gt;跨专业大半年的感悟&lt;/h4&gt;&lt;p&gt;好，现在想来，跨专业也有快一年了，感觉可以趁着这个开源作业的机会，好好探究一下和自我检讨一下这一年我到底学到了什么。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>零基础，就读这篇关于git命令和markdown语法的文章！！！</title>
    <link href="http://wuhongyyyy.github.io/2024/04/16/git%E5%91%BD%E4%BB%A4%E5%92%8Cmakedown%E8%AF%AD%E6%B3%95%E5%A4%A7%E5%85%A8/"/>
    <id>http://wuhongyyyy.github.io/2024/04/16/git%E5%91%BD%E4%BB%A4%E5%92%8Cmakedown%E8%AF%AD%E6%B3%95%E5%A4%A7%E5%85%A8/</id>
    <published>2024-04-16T12:17:02.233Z</published>
    <updated>2024-04-17T07:44:16.755Z</updated>
    
    <content type="html"><![CDATA[<p>由于本人零基础，刚好可以趁着完成开源第一次作业的机会，好好学习常用的git命令和markdown命令，方便自己以后的使用。<span id="more"></span></p><h3 id="1-git相关"><a href="#1-git相关" class="headerlink" title="1.git相关"></a>1.git相关</h3><h5 id="想完全了解什么是git，就读一读这个-参考链接，想简单了解一下就看我写的"><a href="#想完全了解什么是git，就读一读这个-参考链接，想简单了解一下就看我写的" class="headerlink" title="想完全了解什么是git，就读一读这个 参考链接，想简单了解一下就看我写的"></a>想完全了解什么是<code>git</code>，就读一读这个 <a href="https://git-scm.com/doc">参考链接</a>，想简单了解一下就看我写的</h5><h5 id="什么是git？"><a href="#什么是git？" class="headerlink" title="什么是git？"></a><strong>什么是<code>git</code>？</strong></h5><p><code>git</code>是一个分布式版本控制系统，可以用来修改文件、追踪文件的变化，并且和其他人员一起协作开发项目。解释一下就是，你可以和其他人一起在<code>git</code>这个平台对同一个文件进行修改，不需要每个人都分别修改这个文件后，再合并这个文件。</p><h5 id="git的特点？"><a href="#git的特点？" class="headerlink" title="git的特点？"></a><strong><code>git</code>的特点？</strong></h5><ul><li><p>版本分支与合并：可以将网络上的文件在本地备份，然后再在本地开发这些文件，这意味着在开发过程中的试错成本会大大降低，而且可以将开发完成的本地文件通过<code>git</code>命令上传到云端。</p></li><li><p>速度快，因为基本上都是在本地进行操作。常见的工作流程有三种，<a href="https://git-scm.com/about/distributed">工作流程链接</a></p></li><li><p><code>git</code>对数据的保密性做的很好，而且免费，开源。</p></li><li><p><code>git</code>有暂存机制，可以在完成提交之前，对提交进行格式化审查。允许使用<code>git</code>的开发人员仅仅 暂存 已修改文件的部分内容  或者  暂存修改的全部文件。</p></li></ul><h5 id="git的下载。"><a href="#git的下载。" class="headerlink" title="git的下载。"></a><code>git</code>的下载。</h5><p>如果你现在对<code>git</code>感兴趣，下载链接在这里<a href="https://git-scm.com/downloads">下载链接</a>,然后根据你自己的电脑的操作系统对应的下载文件，按照这个<a href="https://zhuanlan.zhihu.com/p/443527549">教程</a>，就能将<code>git</code>安装到本地了。后续的使用，自己再找链接学习吧，因为，哥们也是个小白，只能提供一些简单的<code>git</code>命令。</p><h5 id="git的常用命令学习？git全部命令-点这个链接"><a href="#git的常用命令学习？git全部命令-点这个链接" class="headerlink" title="git的常用命令学习？git全部命令,点这个链接"></a><code>git</code>的常用命令学习？<a href="https://git-scm.com/docs"><code>git</code>全部命令,点这个链接</a></h5><p>在刚开始接触<code>git</code>时，我感觉<code>git</code>命令好多，这整么能学的完，全记住，难道程序员都是天才，但是现在我明白了，不需要记住全部的<code>git</code>命令，只需要记住常用的命令，然后下面，就介绍一些常用的<code>git</code>命令(我自己是Windows系统，<code>git</code>命令都是在命令框界面输入的，使用windos+r打开命令框界面，然后再输入cmd，就可以进行git命令的输入了)。</p><ul><li>在当前目录中初始化新的<code>git</code>仓库</li></ul><p>解释：执行完这个命令后，会在当前目录下创建一个新的<code>.git</code>目录，用于存储<code>git</code>的版本控制所需要的所有信息和对象。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>克隆远程仓库到本地</li></ul><p>解释：这个应该是用的最多的，就是你现在已经找到了你想要开发的项目，但是这个项目的全部文件在一个网络链接里面，现在，你想将这个网络连接里的文件放到电脑本地，以便后续对这个项目进行开发，那么，先在Windows的命令框中，切换到你想要将这个文件存储到哪里的目录，然后使用下面的命令，就能在这个目录下看到你所克隆的文件了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [仓库地址] </span><br></pre></td></tr></table></figure><ul><li>添加远程仓库</li></ul><p>解释：</p><p><code>[远程仓库名]</code> 是你为远程仓库指定的一个简短的名字，通常用来代表远程仓库的地址。</p><p><code>[远程仓库地址]</code> 是远程仓库的 URL 地址，可以是 HTTP、HTTPS 或 SSH 协议。</p><p>例如：如果你想要添加一个名为 <code>origin</code> 的远程仓库，地址为 <code>https://github.com/example/example.git</code>，你可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/example/example.git</span><br></pre></td></tr></table></figure><ul><li>拉取远程仓库的更新到本地</li></ul><p>解释：就是上面的你找的项目，又更新了，你需要更新一下本地的对应的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><ul><li>将本地的提交推送到远程仓库</li></ul><p>解释：不需要解释，因为我没用过，但是挺简单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><ul><li>将本地文件添加到暂存区</li></ul><p>解释：这个命令的意思是，我现在已经基本上完成了本地项目的开发，我想要将这个项目里的修改的文件添加到暂存区。为啥添加到暂存区而不是直接提交到远程仓库，是因为后续可能还会进行修改，那么我再使用这个命令就能一直将修改的文件添加到暂存区，直到感觉本地没啥要修改的文件了，就最后再提交到远程仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add[文件名]</span><br></pre></td></tr></table></figure><p>下面这个命令，是将当前目录下的所有修改过的文件添加到暂存区。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .    </span><br></pre></td></tr></table></figure><ul><li>将暂存区的文件提交到版本库，并附带提交信息。</li></ul><p>解释：上面已经使用<code>add</code>命令将修改的文件放到暂存区了，那么现在想将存储到暂存区里的文件提交到版本库，并附带提交信息，就可以使用这个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;[提交信息]&quot;</span></span><br></pre></td></tr></table></figure><ul><li>关联本地仓库和远程仓库</li></ul><p>解释：用于将指定的远程仓库地址添加到本地仓库，并将其命名为 <code>origin</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git</span><br></pre></td></tr></table></figure><ul><li>显示当前分支的提交的hash值</li></ul><p>解释：这个命令会列出当前分支的提交历史，包括每次提交的作者、日期、提交信息以及对应的哈希值。哈希值是 Git 用来唯一标识每个提交的一串字符，通常以 40 位十六进制数字表示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><ul><li>版本回退，用于完成了错误的操作后，想回到之前正确的提交，以便进行错误的修正。（示例参考了<code>chatgpt</code>）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset</span><br></pre></td></tr></table></figure><p>两个命令</p><p><strong>示例</strong>：假设现在已经使用了<code>git log</code>命令，然后有如下提交历史：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">commit c2f83e7 (HEAD -&gt; main)</span><br><span class="line">Author: User &lt;user@example.com&gt;</span><br><span class="line">Date:   Thu Jan 1 12:00:00 2024 +0100</span><br><span class="line"></span><br><span class="line">    Commit message C</span><br><span class="line"></span><br><span class="line">commit 3b2f94d</span><br><span class="line">Author: User &lt;user@example.com&gt;</span><br><span class="line">Date:   Wed Dec 31 12:00:00 2023 +0100</span><br><span class="line"></span><br><span class="line">    Commit message B</span><br><span class="line"></span><br><span class="line">commit a1b2c3d</span><br><span class="line">Author: User &lt;user@example.com&gt;</span><br><span class="line">Date:   Tue Dec 30 12:00:00 2023 +0100</span><br><span class="line"></span><br><span class="line">    Commit message A</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面总共有<code>c2f83e7</code>、<code>3b2f94d</code>、<code>a1b2c3d</code>三个提交历史。</p><p>那我现在在的位置就是在<code>c2f83e7</code>这个提交这里，但是我可能感觉自己文件操作有问题，想回到之前的<code>3b2f94d</code>这个提交，那么就使用下面这个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 3b2f94d</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 3b2f94d</span><br></pre></td></tr></table></figure><p>这个命令，此时就回到了这个提交节点。</p><p>PS：使用这个命令进行版本回退后，这个操作不可逆！！！</p><p>上面这些就是我在完成开源作业时所使用的一些命令，然后还有一些我没使用过但是也很常用的命令，放在了下面，这些命令都会以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[git命令] # 注释</span><br></pre></td></tr></table></figure><p>的形式给出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status <span class="comment"># 显示工作区、暂存区和版本库的状态</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff <span class="comment"># 显示工作区和暂存区之间的差异</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch [分支名] <span class="comment"># 创建新分支</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> [文件名] <span class="comment"># 从版本库中删除指定的文件</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge [分支名] <span class="comment"># 合并指定分支到当前分支</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v <span class="comment"># 查看远程仓库列表。</span></span><br></pre></td></tr></table></figure><h5 id="总结：看到这里，如果你是一个零基础的小白，应该也多多少少知道了git是什么？git的优点？git的常用的命令，现在最需要的就是，多多使用这些命令，然后越来越熟练。"><a href="#总结：看到这里，如果你是一个零基础的小白，应该也多多少少知道了git是什么？git的优点？git的常用的命令，现在最需要的就是，多多使用这些命令，然后越来越熟练。" class="headerlink" title="总结：看到这里，如果你是一个零基础的小白，应该也多多少少知道了git是什么？git的优点？git的常用的命令，现在最需要的就是，多多使用这些命令，然后越来越熟练。"></a>总结：看到这里，如果你是一个零基础的小白，应该也多多少少知道了<code>git</code>是什么？<code>git</code>的优点？<code>git</code>的常用的命令，现在最需要的就是，多多使用这些命令，然后越来越熟练。</h5><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="2-markdown语法学习"><a href="#2-markdown语法学习" class="headerlink" title="2.markdown语法学习"></a>2.markdown语法学习</h3><p>markdown用一句话总结就是，类似于Word的一种文本编辑器，需要按照markdown编写的格式要求就能获得符合程序员阅读的文档，下面介绍一些常用的markdown命令，到后期我忘了也能过来瞅一瞅。[参考链接](<a href="https://markdown.com.cn/basic-syntax/">Markdown 基本语法 | Markdown 官方教程</a>)</p><ul><li>一级、二级、三级、四级、五级标题</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><ul><li>换行</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is the first line.<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span>And this is the second line.</span><br></pre></td></tr></table></figure><p>This is the first line.<br>And this is the second line.</p><ul><li>强调</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**bold text**</span></span><br></pre></td></tr></table></figure><p><strong>bold text</strong>.</p><ul><li>斜体</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*cat&#x27;s meow*</span></span><br></pre></td></tr></table></figure><p><em>cat’s meow</em></p><ul><li>粗体和斜体</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**<span class="emphasis">*really important*</span>**</span></span><br></pre></td></tr></table></figure><p><em><strong>really important</strong></em></p><ul><li>引用</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; Dorothy followed her through many of the beautiful rooms in her castle.</span></span><br></pre></td></tr></table></figure><blockquote><p>Dorothy followed her through many of the beautiful rooms in her castle.</p></blockquote><ul><li>列表</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 有序列表快捷键 ctrl+shift+[</span></span><br><span class="line"><span class="section"># 无序列表快捷键 ctrl+shift+]</span></span><br></pre></td></tr></table></figure><ul><li>代码语法</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`code`</span></span><br></pre></td></tr></table></figure><p><code>code</code></p><ul><li>多行代码</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```[选择的代码语言]</span></span><br></pre></td></tr></table></figure><ul><li>分隔线</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-----------------</span><br></pre></td></tr></table></figure><hr><ul><li>链接语法</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个[<span class="string">链接</span>](<span class="link">https://markdown.com.cn&quot;laowu&quot;</span>)</span><br></pre></td></tr></table></figure><p>这是一个<a href="https://markdown.com.cn"laowu"/">链接</a></p><ul><li>图片导入，给图片加链接</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">这是图片</span>](<span class="link">对应的相对链接 &quot;不是哥们&quot;</span>)</span><br></pre></td></tr></table></figure><p>例如：需要上传一个位于source&#x2F;img&#x2F;OIP.jpg的图片</p><p><img src="/../img/OIP.jpg" alt="花的图片" title="不是哥们"></p><ul><li>给图片加上链接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[![沙漠中的岩石图片](/assets/img/shiprock.jpg &quot;Shiprock&quot;)](https://markdown.com.cn)</span><br></pre></td></tr></table></figure><ul><li>转义字符</li></ul><p>“\“</p><ul><li>特殊字符的转义。累了就这样吧，想看的，参考这个链接吧</li></ul><p>[markdown官方教程](<a href="https://markdown.com.cn/">Markdown 官方教程</a>)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;由于本人零基础，刚好可以趁着完成开源第一次作业的机会，好好学习常用的git命令和markdown命令，方便自己以后的使用。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>小白搭博客指南</title>
    <link href="http://wuhongyyyy.github.io/2024/04/16/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%BB%8F%E9%AA%8C/"/>
    <id>http://wuhongyyyy.github.io/2024/04/16/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%BB%8F%E9%AA%8C/</id>
    <published>2024-04-16T12:15:18.355Z</published>
    <updated>2024-04-17T12:48:20.031Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章记录一下本人在完成开源第一次作业时，搭博客时遇到的一些问题及对应的解决办法。<span id="more"></span></p><h3 id="1-博客主题及选取原因："><a href="#1-博客主题及选取原因：" class="headerlink" title="1.博客主题及选取原因："></a>1.博客主题及选取原因：</h3><p>laowu一开始选取的是<code>jekyll</code>网站中的<code>Hydejack</code>模版，但是由于这个模版分为免费版和付费版，我下载完，搭建后的模版是属于免费版的不是很好看，所以laowu就取消了这个模板。而且在选择<code>jekyll</code>中的模板的时候，开发文档都是英文，对小白的laowu来说，不是很友好，所以，思索再三选择了<code>hexo</code>中的<code>archer</code>主题。界面示例如下图所示。</p><p><img src="/../img/blog_img/Archer@2x.jpg"></p><p><strong>选取原因：</strong></p><ul><li>这个界面支持中英文</li><li>简洁大方，方便我自己的上传和维护。</li><li>它结合了前者的侧边栏和后者的 UI 设计。您可以通过导航侧边栏切换到存档、标记和类别，而无需跳转到新页面。</li><li>兼容性：现代浏览器和IE 10 +。</li></ul><h3 id="2-博客页面布局及其设计思路"><a href="#2-博客页面布局及其设计思路" class="headerlink" title="2.博客页面布局及其设计思路"></a>2.博客页面布局及其设计思路</h3><ul><li>至少包括我的个人信息，侧边栏，about me ，文章首页和文章内容五个页面。</li><li>设计思路：替换主页和文章和about页面的照片，修改个人信息界面，修改<code>_config.archer.yml</code>中的内容，实现文章导航栏、页面红色进度条、侧边tag、侧边搜索等多种功能。</li></ul><h3 id="3-博客功能实现及其技术选择"><a href="#3-博客功能实现及其技术选择" class="headerlink" title="3.博客功能实现及其技术选择"></a>3.博客功能实现及其技术选择</h3><p>技术选择：<code>hexo</code>+<code>algoria</code>+<code>git</code>等。</p><p>功能实现流程：</p><ol><li><p>首先刚接到这个搭博客的任务的时候，由于一开始我选择的是<code>jekyll</code>框架，所以，我跟着这个[链接](<a href="https://jmcglone.com/guides/github-pages/">A Guide to Creating and Hosting a Personal Website on GitHub | Jonathan McGlone | Librarian, Product Designer, User Researcher, Digital Publisher, Accessibility Specialist, Music Enthusiast, Web Noodler. (jmcglone.com)</a>)学习了<code>git</code>、<code>github</code>和<code>github pages</code>相关的使用流程，并跟着做出了一个非常简单的<code>blog</code>。</p></li><li><p>之后，我决定套用<code>jekyll</code>中的模板，然后再多次尝试下搭建完成，但是太丑了，我决定从头开始搭建<code>hexo</code>中的<code>archer</code>模板。</p></li><li><p>首先考虑下载<code>hexo</code>，通过这个[链接](<a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a>)，下载<code>hexo</code>，下载<code>git</code>（这里可以参考我之前的博客），以及配套的<code>Node.js</code>软件，本地最好有个<code>markdown</code>软件用于进行<code>_config.yml</code>的读取和配置，我这里使用的是<code>sublime_text</code>。好的，现在基本的需要用到的工具都下载到本地了。</p></li><li><p>在电脑本地的某一个目录里创建一个用来存放我需要搭建的blog，我这里将其放在了D盘的blog下，所以，先使用<code>windows+r</code>，输入<code>cmd</code>打开命令框，再使用下面的命令切换到这个目录，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:</span><br><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure></li><li><p>接下来，使用</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo init my_blog</span><br></pre></td></tr></table></figure><p>​命令对这个目录初始化，这样，就初始化了一个名为<code>my_blog</code>的<code>hexo</code>项目。</p><ol start="6"><li>进入到新创建的Hexo项目目录，然后执行以下命令安装项目所需的依赖：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><ol start="7"><li>找到<code>archer</code>开发文档界面，[链接](<a href="https://github.com/fi3ework/hexo-theme-archer/blob/master/README.md">hexo-theme-archer&#x2F;README.md at master · fi3ework&#x2F;hexo-theme-archer (github.com)</a>)</li><li>按照他的要求，在命令行输入以下代码</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/fi3ework/hexo-theme-archer.git themes/archer --depth=1</span><br><span class="line">npm install hexo-generator-json-content</span><br></pre></td></tr></table></figure><p>9.在<code>_config.yml</code>中添加以下字段：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">jsonContent:</span><br><span class="line">  meta: <span class="literal">true</span></span><br><span class="line">  pages: <span class="literal">false</span></span><br><span class="line">  posts:</span><br><span class="line">    title: <span class="literal">true</span></span><br><span class="line">    <span class="built_in">date</span>: <span class="literal">true</span></span><br><span class="line">    path: <span class="literal">true</span></span><br><span class="line">    text: <span class="literal">false</span></span><br><span class="line">    raw: <span class="literal">false</span></span><br><span class="line">    content: <span class="literal">false</span></span><br><span class="line">    slug: <span class="literal">false</span></span><br><span class="line">    updated: <span class="literal">false</span></span><br><span class="line">    comments: <span class="literal">false</span></span><br><span class="line">    <span class="built_in">link</span>: <span class="literal">false</span></span><br><span class="line">    permalink: <span class="literal">true</span></span><br><span class="line">    excerpt: <span class="literal">false</span></span><br><span class="line">    categories: <span class="literal">true</span></span><br><span class="line">    tags: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这个操作我是使用<code>sublime_text</code>打开的<code>_config.yml</code>文件，命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sublime_text _config.yml</span><br></pre></td></tr></table></figure><p>打开后记得按ctrl+s保存一下。</p><p>10.后面就按照这个主题的开发文档的要求，配置自己想要的东西，配置完成后，在本地输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate <span class="comment"># 忘了这个命令是不是必须要写的了，可以试试不写这个代码</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>查看自己的静态博客。</p><p>11.然后就按照开发文档的要求，修修改改，然后发布到<code>github pages</code>上。</p><p>12.发布到<code>github pages</code>我是参考的<code>chatgpt</code>给出的命令：</p><h5 id="chatgpt"><a href="#chatgpt" class="headerlink" title="chatgpt:"></a><strong><code>chatgpt</code>:</strong></h5><p>要将本地的 <code>Hexo </code>静态文件保存到 <code>GitHub Pages </code>中，并通过 <code>username.github.io</code> 访问，你需要执行以下步骤：</p><ol><li><p><strong>准备工作</strong>：</p><ul><li>确保你已经安装了<code>Git</code>，并在本地设置了 <code>GitHub</code> 的身份验证信息。</li><li>确保你已经创建了一个名为 <code>&lt;username&gt;.github.io</code> 的空仓库（<code>&lt;username&gt;</code> 是你的 <code>GitHub</code> 用户名）。</li></ul></li><li><p><strong>生成静态文件</strong>： 在 <code>Hexo </code>项目目录中执行以下命令，生成静态文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></li><li><p><strong>初始化 Git 仓库</strong>： 在 <code>Hexo </code>项目目录中执行以下命令，初始化 <code>Git</code> 仓库并将生成的静态文件添加到仓库中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> public <span class="comment"># 这里注意，切换到public文件下，git相关的配置都在这个下面，以后每次都要先cd到public下面，也可以不选择cd public，也许，大概。</span></span><br><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>关联 GitHub 远程仓库</strong>： 关联你的本地仓库和 <code>GitHub</code> 远程仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git</span><br></pre></td></tr></table></figure></li><li><p><strong>推送到 GitHub Pages</strong>： 将本地的静态文件推送到 <code>GitHub</code> 远程仓库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li><li><p><strong>访问你的网站</strong>： 在浏览器中输入 <code>https://&lt;username&gt;.github.io</code> 即可访问你的网站。</p></li></ol><p>这样，你的 <code>Hexo</code> 网站就会被保存到 <code>GitHub Pages </code>中，并可以通过 <code>https://&lt;username&gt;.github.io</code> 访问。</p><ol start="7"><li><code>blog</code>更新：直接一口气全放在代码里面了</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line"><span class="built_in">cd</span> public</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Update files&quot;</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>依次输入上面的命令，应该就能更新自己的<code>blog</code>了。</p><h3 id="4-博客制作过程中遇到的问题及其解决方法"><a href="#4-博客制作过程中遇到的问题及其解决方法" class="headerlink" title="4.博客制作过程中遇到的问题及其解决方法"></a>4.博客制作过程中遇到的问题及其解决方法</h3><p>其实作为小白，以及只会cd 命令行的我，确实遇到了好多错误，但好在在互联网和<code>chatgpt</code>的帮助下，我好像也就是遇到几个没法解决的问题。</p><ul><li>第一个问题：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/wuhongyyyy/wuhongyyyy.github.io.git/&#x27;</span>: Failed to connect to github.com port 443 after 21043 ms: Couldn<span class="string">&#x27;t connect to server</span></span><br></pre></td></tr></table></figure><p>原因：这个错误提示表明 Git 无法连接到 GitHub。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:wuhongyyyy/wuhongyyyy.github.io.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者：可能是没有登录</span></span><br><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure><ul><li>第二个问题，图片无法加载到静态网站上：</li></ul><p>原因：可能是因为本地的<code>markdown</code>既可以使用绝对路径，也可以使用相对路径，但是在静态网站里面，绝对路径失效，只能使用相对路径。</p><ul><li>第三个问题：</li></ul><p>在使用<code>algoria</code>制作搜索功能时，在输入这个命令后报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HEXO_ALGOLIA_INDEXING_KEY=<span class="string">&#x27;apiKey&#x27;</span></span><br></pre></td></tr></table></figure><p>原因：windows下的<code>apikey</code>外面不需要加冒号。</p><p><strong>其他</strong>：反正搭建时遇到了好多问题，我也是个小白，上面写的步骤可能还有错误。但是，<strong>chatgpt主</strong>基本上能解决大部分问题，<strong>chatgpt主</strong>万岁！！！未来<strong>chatgpt主</strong>统治互联网的时候，记得看到这个我这句话。不过，主不在乎。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇文章记录一下本人在完成开源第一次作业时，搭博客时遇到的一些问题及对应的解决办法。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wuhongyyyy.github.io/2024/04/16/hello-world/"/>
    <id>http://wuhongyyyy.github.io/2024/04/16/hello-world/</id>
    <published>2024-04-16T06:03:30.784Z</published>
    <updated>2024-04-16T13:11:13.837Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<span id="more"></span></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.</summary>
    
    
    
    
  </entry>
  
</feed>
